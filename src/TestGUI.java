import java.awt.BasicStroke;import java.awt.BorderLayout;import java.awt.Color;import java.awt.Dimension;import java.awt.FlowLayout;import java.awt.Graphics;import java.awt.Graphics2D;import java.awt.Image;import java.awt.Point;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.awt.event.MouseEvent;import java.awt.event.MouseListener;import java.awt.event.MouseMotionListener;import java.awt.image.BufferedImage;import java.io.File;import java.io.IOException;import java.net.MalformedURLException;import java.net.URL;import javax.imageio.ImageIO;import javax.swing.DefaultComboBoxModel;import javax.swing.ImageIcon;import javax.swing.JButton;import javax.swing.JComboBox;import javax.swing.JFileChooser;import javax.swing.JFrame;import javax.swing.JLabel;import javax.swing.JMenu;import javax.swing.JMenuBar;import javax.swing.JMenuItem;import javax.swing.JPanel;import javax.swing.JSpinner;import javax.swing.JToolBar;import javax.swing.SpinnerNumberModel;import javax.swing.SwingUtilities;import javax.swing.filechooser.FileNameExtensionFilter;//import Panels.Canvas;//not used filepublic class TestGUI {	public static void main(String[] args) {		// TODO Auto-generated method stub		SwingUtilities.invokeLater(new Runnable() {			public void run() {				System.out.println("실행하지않는클래스");//				createAndShowGUI();			}		});	}	//안쓰는 메소드	private static void createAndShowGUI() {		System.out.println("Created GUI on EDT?" + SwingUtilities.isEventDispatchThread());//		JFrame f = new JFrame("Swing Paint Demo");		JFrame f = new DS_project_v1();		f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);		RectPanel rectPanel = new RectPanel();		f.add(rectPanel, BorderLayout.NORTH);//여기서 RectPanel추가		f.pack();		f.setVisible(true);	}}class PanelEx extends JPanel{	Dimension dim = new Dimension(1000,700);	Dimension dim2 = new Dimension(1000,400);	CanvasEx ce = new CanvasEx();		PanelEx(){		setSize(dim);		setBackground(Color.orange);		setLayout(null);		setVisible(true);		add(ce);		ce.setSize(dim2);		ce.setBackground(Color.white);		ce.setLocation(0,50);	}		class CanvasEx extends JPanel {			}}//program panel창class RectPanel extends JPanel implements ActionListener, MouseListener, MouseMotionListener {	String shapeString = ""; // 도형의 형태를 담는 변수	Point firstPointer = new Point(0, 0);	Point secondPointer = new Point(0, 0);	BufferedImage bufferedImage;	Color colors = Color.black;	Float stroke = (float) 5;	JComboBox<Color> colorComboBox;	JComboBox<Float> strokeComboBox; // float로 설정해주는 이유는 setStroke에서 받는 인자 자료형이 float	int width;	int height;	int minPointx;	int minPointy;		public RectPanel() {		//panel 구성 요소 생성		//DS_project.java - createmenu에 있던 이미지 버튼들 가져온거		//툴바 어차피 내용 똑같은거 PainterTools 클래스로 뺐음 -> TestGUI 말고 Panels에서 툴바 추가하도록 코드 변경		PainterTools tb = new PainterTools();		tb.setLocation(0,0);		tb.setPreferredSize(new Dimension(1000,60));	    tb.setBackground(Color.white);	    tb.setLayout(new FlowLayout());        SpinnerNumberModel fontsize = new SpinnerNumberModel(8, 1, 50, 1);        JSpinner spinner = new JSpinner(fontsize);//        JComboBox combo = new JComboBox<>();////        //        tb.setLocation(0, 0);//        tb.setPreferredSize(new Dimension(1000,60));//        //		ImageIcon back = new ImageIcon("folder/back.png");//        ImageIcon back2 = new ImageIcon("folder/back2.png");//        ImageIcon copy = new ImageIcon("folder/copy.png");//        ImageIcon copy2 = new ImageIcon("folder/copy2.png");//        ImageIcon front = new ImageIcon("folder/front.png");//        ImageIcon front2 = new ImageIcon("folder/front2.png");//        ImageIcon paste = new ImageIcon("folder/paste.png");//        ImageIcon paste2 = new ImageIcon("folder/paste2.png");//        ImageIcon leftrotation = new ImageIcon("folder/leftrotation.png");//        ImageIcon leftrotation2 = new ImageIcon("folder/leftrotation2.png");//        ImageIcon rightrotation = new ImageIcon("folder/rightrotation.png");//        ImageIcon rightrotation2 = new ImageIcon("folder/rightrotation2.png");//        ImageIcon color = new ImageIcon("folder/color.png");//        ImageIcon color2 = new ImageIcon("folder/color2.png");//        ImageIcon line = new ImageIcon("folder/line.png");//        ImageIcon line2 = new ImageIcon("folder/line2.png");//        ImageIcon erase = new ImageIcon("folder/erase.png");//        ImageIcon erase2 = new ImageIcon("folder/erase2.png");////        Image[] org_image = new Image[9];//        Image[] ch_image = new Image[9];//        ImageIcon[] org_icon = new ImageIcon[9];//        ImageIcon[] ch_icon = new ImageIcon[9];////        org_image[0] = back.getImage();//        org_image[1] = front.getImage();//        org_image[2] = copy.getImage();//        org_image[3] = paste.getImage();//        org_image[4] = leftrotation.getImage();//        org_image[5] = rightrotation.getImage();//        org_image[6] = color.getImage();//        org_image[7] = line.getImage();//        org_image[8] = erase.getImage();////        ch_image[0] = back2.getImage();//        ch_image[1] = front2.getImage();//        ch_image[2] = copy2.getImage();//        ch_image[3] = paste2.getImage();//        ch_image[4] = leftrotation2.getImage();//        ch_image[5] = rightrotation2.getImage();//        ch_image[6] = color2.getImage();//        ch_image[7] = line2.getImage();//        ch_image[8] = erase2.getImage();////        for (int i = 0; i < org_image.length; i++) {//            org_image[i] = org_image[i].getScaledInstance(40, 40, Image.SCALE_SMOOTH);//        }////        for (int i = 0; i < ch_image.length; i++) {//            ch_image[i] = ch_image[i].getScaledInstance(40, 40, Image.SCALE_SMOOTH);//        }////        for (int i = 0; i < org_icon.length; i++) {//            org_icon[i] = new ImageIcon(org_image[i]);//        }////        for (int i = 0; i < ch_icon.length; i++) {//            ch_icon[i] = new ImageIcon(ch_image[i]);//        }//////        tb.setBackground(Color.white);//        tb.setLayout(new FlowLayout());//////        JButton[] btn = new JButton[9];////        for (int i = 0; i < btn.length; i++) {//            btn[i] = new JButton(org_icon[i]);//            tb.add(btn[i]);//            btn[i].setPreferredSize(new Dimension(40, 40));//            btn[i].setRolloverIcon(ch_icon[i]);//            btn[i].setBorderPainted(true);//            tb.addSeparator();//        }////        tb.addSeparator();////        JLabel sizelabel = new JLabel("Text Size");//        sizelabel.setPreferredSize(new Dimension(60, 40));//        tb.add(sizelabel);//        tb.add(spinner);////        tb.addSeparator();////        JLabel fontlabel = new JLabel("Fonts");//        fontlabel.setPreferredSize(new Dimension(40,40));//        combo.addItem("맑은 고딕");//        combo.addItem("궁서체");//        combo.addItem("함초롱바탕");//        tb.add(fontlabel);//        tb.add(combo);        add(tb);//		add(openButton);		Dimension d = getPreferredSize();		bufferedImage = new BufferedImage(d.width, d.height, BufferedImage.TYPE_INT_ARGB);		setImageBackground(bufferedImage); // save 할 때 배경이 default로 black이여서 흰색으로//		eraseAllButton.addActionListener(this);//		rectButton.addActionListener(this);//		eraseButton.addActionListener(this);//		colorComboBox.addActionListener(this);//		strokeComboBox.addActionListener(this);//		saveButton.addActionListener(new SaveL(this, bufferedImage));//		openButton.addActionListener(new OpenL(this, bufferedImage));		addMouseListener(this);		addMouseMotionListener(this);	}	/* mousePressed	 * 클릭이 시작되면 전에 사용한 위치 저장 변수를 초기화함	 * firstPointer<- 클릭된 곳의 좌표	 */	public void mousePressed(MouseEvent e) {		System.out.println("mouse pressed in panel");		// 다시 클릭됐을경우 좌표 초기화		firstPointer.setLocation(0, 0);		secondPointer.setLocation(0, 0);		firstPointer.setLocation(e.getX(), e.getY());	}	/* mouseRelease	 * 마우스 클릭 끝날때	 * secondPointer<- 마지막으로 클릭된 위치	 */	public void mouseReleased(MouseEvent e) {		System.out.println("mouse released in panel");		secondPointer.setLocation(e.getX(), e.getY());		updatePaint();	}	public void actionPerformed(ActionEvent e) {		System.out.println("action performed in panel");		//네모 or 지우개 or 전체 지우기		if (e.getSource().getClass().toString().contains("JButton")) {			shapeString = e.getActionCommand();		}		//색상 선택		else if (e.getSource().equals(colorComboBox)) {			colors = (Color) colorComboBox.getSelectedItem();		}		//굵기 선택		else if (e.getSource().equals(strokeComboBox)) {			stroke = (float) strokeComboBox.getSelectedItem();		}	}	public Dimension getPreferredSize() {		return new Dimension(1000, 400);	}		public void updatePaint() {		//width, height: 두개의 점(firstPointer, secondPointer)들의 x, y 좌표 뺀 절댓값		width = Math.abs(secondPointer.x - firstPointer.x);		height = Math.abs(secondPointer.y - firstPointer.y);		//minPointx,y: 두개의 점의 x,y값 중 더 작은 값		minPointx = Math.min(firstPointer.x, secondPointer.x);		minPointy = Math.min(firstPointer.y, secondPointer.y);		//Graphics2D: 그림 그리기 위한 라이브러리. createGraphics하고 나면 끝에 dispose(), repaint() 붙여줘야 한다.		Graphics2D g = bufferedImage.createGraphics();		System.out.println("update paint: shapeString is "+shapeString);		// draw on paintImage using Graphics		switch (shapeString) {		case ("Rectangular")://원래 네모였던 것			System.out.println("paint rectangular");			g.setColor(colors);			g.setStroke(new BasicStroke(stroke));			g.drawRect(minPointx, minPointy, width, height);			break;		case ("지우개"):			g.setColor(Color.white);			g.setStroke(new BasicStroke(stroke));			g.drawLine(firstPointer.x, firstPointer.y, secondPointer.x, secondPointer.y);			break;					case ("전체지우기"):			setImageBackground(bufferedImage);			shapeString ="";			break;					default:			break;		}		g.dispose();		repaint();	}	/* paintComponent	 * bugfferedImage에 로드된 이미지를 panel에 그림	 */	protected void paintComponent(Graphics g) {		super.paintComponent(g);		g.drawImage(bufferedImage, 0, 0, null);	}	public void setImageBackground(BufferedImage bi) {		this.bufferedImage = bi;		Graphics2D g = bufferedImage.createGraphics();		g.setColor(Color.white);		g.fillRect(0, 0, 500, 700);		g.dispose();	}	@Override	public void mouseDragged(MouseEvent e) {		// TODO Auto-generated method stub				width = Math.abs(secondPointer.x - firstPointer.x);		height = Math.abs(secondPointer.y - firstPointer.y);		minPointx = Math.min(firstPointer.x, secondPointer.x);		minPointy = Math.min(firstPointer.y, secondPointer.y);								if (shapeString == "펜" | shapeString == "지우개") {			if (secondPointer.x != 0 && secondPointer.y != 0) {				firstPointer.x = secondPointer.x;				firstPointer.y = secondPointer.y;			}			secondPointer.setLocation(e.getX(), e.getY());			updatePaint();		} else if (shapeString == "Rectangular") {			Graphics g = getGraphics();			g.setColor(Color.BLACK);			g.setXORMode(getBackground());						g.drawRect(minPointx, minPointy, width, height);			secondPointer.setLocation(e.getX(), e.getY());			repaint();			g.dispose();		} 	}	@Override	public void mouseMoved(MouseEvent e) {		// TODO Auto-generated method stub	}	@Override	public void mouseClicked(MouseEvent e) {		// TODO Auto-generated method stub		System.out.println("mouse click in panel");	}	@Override	public void mouseEntered(MouseEvent e) {		// TODO Auto-generated method stub	}	@Override	public void mouseExited(MouseEvent e) {		// TODO Auto-generated method stub	}}// Class dotButton//파일불러오기class OpenL{	RectPanel rectPanel;	Panels panel;	BufferedImage bufferedImage;	JFileChooser jFileChooser = new JFileChooser();;//	OpenL(RectPanel rectPanel, BufferedImage bufferedImage) {//		this.rectPanel = rectPanel;//		this.bufferedImage = bufferedImage;//	}	OpenL(Panels panel) {		this.panel = panel;	}		public void openPic() {		// TODO Auto-generated method stub		FileNameExtensionFilter filter = new FileNameExtensionFilter("JPEG", "jpeg", "jpg", "png", "bmp", "gif");		jFileChooser.addChoosableFileFilter(filter);		int rVal = jFileChooser.showOpenDialog(null);		if (rVal == JFileChooser.APPROVE_OPTION) {			File selectedFile = jFileChooser.getSelectedFile();			try {				System.out.println("open picture");				BufferedImage bi = ImageIO.read(new File(selectedFile.getAbsolutePath()));				Dimension nDim = new Dimension(bi.getWidth(), bi.getHeight());				Graphics2D g2 = bi.createGraphics();//				panel.canvas.printAll(g2);  								panel.canvas.paint(g2);				g2.dispose(); //				rectPanel.bufferedImage = ImageIO.read(new File(selectedFile.getAbsolutePath()));//				rectPanel.repaint();			} catch (IOException e1) {				// TODO Auto-generated catch block				e1.printStackTrace();			}		}		if (rVal == JFileChooser.CANCEL_OPTION) {		}	}}// class OpenL//파일저장하기//Panels 객체로 변경class SaveL {//	RectPanel rectPanel;	Panels panels;	BufferedImage bufferedImage;	JFileChooser jFileChooser;//	SaveL(RectPanel rectPanel, BufferedImage bufferedImage) {//		this.rectPanel = rectPanel;//		this.bufferedImage = bufferedImage;//	}		SaveL(Panels panels){		this.panels = panels;//		this.bufferedImage = bufferedImage;	}		public void savePic() {		jFileChooser = new JFileChooser();		jFileChooser.setFileFilter(new FileNameExtensionFilter("*.png", "png"));		int rVal = jFileChooser.showSaveDialog(null);		if (rVal == JFileChooser.APPROVE_OPTION) {			File file = jFileChooser.getSelectedFile();			try {				ImageIO.write(bufferedImage, "png", new File(file.getAbsolutePath()));				System.out.println("saved Correctly " + file.getAbsolutePath());			} catch (IOException e1) {				System.out.println("Failed to save image");			}		}		if (rVal == JFileChooser.CANCEL_OPTION) {			System.out.println("No file choosen");		}	}}// class SaveL